name: Auto Pull Changes (All Branches)

on:
  workflow_call:
    inputs:
      commands:
        description: "Commands to run based on repository"
        required: false
        default: ""
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH for Access
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Extract IPs from the inventory.ini file and add them to known_hosts with error handling
          for host in $(grep -Eo '^[^#;]+(\.[^#;]+)(com|net)' inventory.ini); do
            echo "Adding $host to known_hosts"
            ssh-keyscan -H $host >> ~/.ssh/known_hosts 2>/dev/null || {
              echo "Warning: $host is unreachable or failed to add to known_hosts"
              echo "$host" >> unresolved_hosts.txt
            }
          done

      - name: Pull Latest Code on Servers
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo $SSH_PRIVATE_KEY
          unresolvedHost=$(cat unresolved_hosts.txt || echo "No unresolved hosts")

          branchName=$(echo "$GITHUB_REF" | awk -F/ '{print $3}')
          
          while read -r line; do
            # Extract the host and user from each line in the inventory.ini
            host=$(echo "$line" | grep -oP '^[a-zA-Z0-9.-]+')
            user=$(echo "$line" | grep -oP 'user=\K\w+')
            echo "Connecting to $user@$host"
            if [ -n "$unresolvedHost" ] && grep -q "$host" unresolved_hosts.txt; then
              echo "Skipping $user@$host due to unresolved host"
              continue
            fi

            # Attempt SSH connection and execute commands
            ssh -o "StrictHostKeyChecking=no" "$user@$host" "
              echo 'Connected to $user@$host'
              cd /Ansible &&
              git stash --include-untracked &&
              currentBranchName=\$(git rev-parse --abbrev-ref HEAD) &&
              echo \"Current branch is \$currentBranchName\" &&
              git fetch --all &&
              git checkout $branchName &&
              git reset --hard origin/$branchName &&

              git checkout \$currentBranchName &&
              git stash pop
            " || echo "Error: Could not update code on $user@$host" &

          done < <(grep -E '^[^\[#;]' inventory.ini)
          wait
          echo "Code pull process completed on all servers"
